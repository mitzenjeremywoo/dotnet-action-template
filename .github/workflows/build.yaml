on:
 workflow_call:
   inputs:
      targetProjectPath:
        type: string
        default: 'src'
        required: true
      dockerContext:
        type: string
        default: 'src'
        required: true
      agent:
        type: string
        default: 'ubuntu-latest'
      nugetUrl:
        type: string
        default: 'https://nuget.pkg.github.com/mitzenjeremywoo/index.json'
      publishNuget: 
        type: boolean
        default: false
      buildOutputPath:
        type: string
        default: 'release'
      artifactDownloadPath:
        type: string
        default: 'artifactPath'
   
jobs:       
  build:   
    env:
      ACTIONS_STEP_DEBUG : true
      ACTIONS_RUNNER_DEBUG : true

    #needs: ${{ inputs.dependencies }}

    runs-on: ${{ inputs.agent }}
    strategy:
      matrix:
        dotnet-version: ['8.0.x']

    steps:
      - uses: actions/checkout@v4
     
      - name: Setup dotnet ${{ matrix.dotnet-version }}
        if: success()
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          source-url: ${{ inputs.nugetUrl }}
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Display dotnet version
        if: success()
        run: dotnet --version
    
      - name: build project(s)
        if: success()
        run: | 
            cd ${{ github.workspace }}/${{ inputs.targetProjectPath }}
            dotnet restore
            dotnet build 
            dotnet build --configuration Release
     
      - name: create package for project(s)
        if: ${{ inputs.publishNuget }}
        run: | 
            cd ${{ github.workspace }}/${{ inputs.targetProjectPath }}
            ls -al -R
            dotnet pack --no-build --no-restore . /p:Version=1.0.${{ github.run_number }} --output targetPackage
            ls -al -R targetPackage
            dotnet nuget push ${{ github.workspace }}/${{ inputs.targetProjectPath }}/targetPackage/*.nupkg
            
      - name: upload artifacts 
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: buildArtifact
          path: ${{ github.workspace  }}/src/ConsoleApp1/ConsoleApp1/bin/Release/net8.0/
  
  containerizeApp:
   
    env:
        REGISTRY: ghcr.io
        IMAGE_NAME: ${{ github.repository }}

    needs: ['build']

    runs-on: ${{ inputs.agent }}

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: buildArtifact
          path: ${{ inputs.dockerContext }}/${{ inputs.artifactDownloadPath }}

      - name: Display structure of artifact files
        run: ls -R
  
      ## login to the registry 
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ${{ inputs.dockerContext }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true